{"version":3,"sources":["calculadora.service.js","calculadora.js","serviceWorker.js","index.js"],"names":["CalculadoraService","numero1","numero2","operacao","resultado","numAtual","numConcat","indexOf","Calculadora","calcular","concatenarNumero","SOMA","SUB","DIV","MULT","useState","txtNumeros","setTxtNumeros","setNumero1","setNumero2","setOperacao","adicionarNumeros","numero","definirOperacao","op","parseFloat","toString","name","Jumbotron","style","background","backgroundColor","padding","margin","width","Container","Row","Col","xs","Button","variant","onClick","Form","Control","type","className","readOnly","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe9c040e.chunk.js","sourcesContent":["function CalculadoraService() {\r\n    const SOMA = '+';\r\n    const SUB = '-';\r\n    const DIV = '/';\r\n    const MULT = '*';\r\n    function calcular(numero1, numero2, operacao) {\r\n        let resultado;\r\n        switch (operacao) {\r\n            case SOMA:\r\n                resultado = numero1 + numero2\r\n                break;\r\n            case SUB:\r\n                resultado = numero1 - numero2\r\n                break;\r\n            case DIV:\r\n                resultado = numero1 / numero2\r\n                break;\r\n            case MULT:\r\n                resultado = numero1 * numero2\r\n                break;\r\n            default:\r\n                resultado = 0;\r\n        }\r\n\r\n        return resultado\r\n\r\n    }\r\n\r\n    function concatenarNumero(numAtual, numConcat){\r\n\r\n     if (numAtual === '0' || numAtual === null){\r\n      numAtual = '';\r\n     }\r\n   \r\n\r\n     if (numConcat === '.' && numAtual === ''){\r\n       return'0.';\r\n     }\r\n\r\n\r\n     if (numConcat === '.' && numAtual.indexOf('.') > -1){\r\n       return numAtual;\r\n     }\r\n\r\n\r\n    return numAtual + numConcat;\r\n    }\r\n\r\n\r\n    return [\r\n        calcular,\r\n        concatenarNumero,\r\n        SOMA, \r\n        SUB,\r\n        DIV,\r\n        MULT\r\n    ];\r\n\r\n}\r\nexport default CalculadoraService;","import React, {useState} from 'react';\nimport './calculadora.css';\nimport {\n  Jumbotron, Container, Row, Col, Button, Form\n} from 'react-bootstrap';\nimport CalculadoraService from './calculadora.service';\n\n\n\nfunction Calculadora() {\n\n  const [calcular, concatenarNumero , SOMA, SUB, DIV, MULT] = CalculadoraService();\n\n  const [txtNumeros, setTxtNumeros] = useState('0');\n  const [numero1, setNumero1] = useState('0');\n  const [numero2, setNumero2] = useState(null);\n  const [operacao, setOperacao] = useState(null);\n\n  function adicionarNumeros(numero){\n   let resultado;\n    if (operacao === null){\n      resultado = concatenarNumero(numero1, numero);\n      setNumero1(resultado);\n    }else{\n      resultado = concatenarNumero(numero2, numero);\n      setNumero2(resultado);\n    }\n    setTxtNumeros(resultado);\n\n  }\n\n  function definirOperacao (op){\n    if (operacao === null){\n      setOperacao(op);\n      return;\n    }\n    if (numero2 !== null){\n      const resultado = calcular(parseFloat(numero1), parseFloat(numero2), operacao)\n      setOperacao(op);\n      setNumero1(resultado.toString());\n      setNumero2(null);\n      setTxtNumeros(resultado.toString());\n    }\n  }\n\n  function acaoCalcular (){\n    if (numero2 === null ){\n      return;\n    }\n    const resultado = calcular(parseFloat(numero1), parseFloat(numero2), operacao);\n    setTxtNumeros(resultado);\n    \n  }\n\n  function limpar(){\n    setTxtNumeros('0');\n    setNumero1 ('0');\n    setNumero2(null);\n    setOperacao(null);\n\n\n  }\n  return (\n\n    <div>\n      <h1 name=\"nome\">Calculadora</h1>\n      <Jumbotron style={{\n        background: 'transparent !important',\n        backgroundColor: '#101321',\n        padding: '5px',\n        margin: '5px',\n        width: '400px'\n      }}>\n        <Container>\n          <Row>\n            <Col xs=\"3\">\n              <Button variant=\"danger\" onClick={limpar}>C</Button>\n            </Col>\n            <Col xs=\"9\">\n              <Form.Control type=\"text\"\n                name=\"txtNumeros\"\n                className=\"text-right\"\n                readOnly=\"readonly\" \n                value={txtNumeros} />\n            </Col>\n          </Row>\n\n\n          <Row>\n            <Col>\n              <Button variant=\"light\" onClick={() => adicionarNumeros('7')}>7</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={() => adicionarNumeros('8')}>8</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={() => adicionarNumeros('9')}>9</Button>\n            </Col>\n            <Col>\n              <Button variant=\"warning\" onClick ={() => definirOperacao(DIV)}>/</Button>\n            </Col>\n          </Row>\n\n\n          <Row>\n            <Col>\n              <Button variant=\"light\" onClick={() => adicionarNumeros('4')}>4</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={() => adicionarNumeros('5')}>5</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\"onClick={() => adicionarNumeros('6')}>6</Button>\n            </Col>\n            <Col>\n              <Button variant=\"warning\" onClick ={() => definirOperacao(MULT)} >*</Button>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Button variant=\"light\"onClick={() => adicionarNumeros('1')}>1</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={() => adicionarNumeros('2')}>2</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={() => adicionarNumeros('3')}>3</Button>\n            </Col>\n            <Col>\n              <Button variant=\"warning\"onClick ={() => definirOperacao(SUB)}>-</Button>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Button variant=\"light\" onClick={() => adicionarNumeros('0')}>0</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\"onClick={() => adicionarNumeros('.')}>.</Button>\n            </Col>\n            <Col>\n              <Button variant=\"success\" onClick={acaoCalcular} >=</Button>\n            </Col>\n            <Col>\n              <Button variant=\"warning\"onClick ={() => definirOperacao(SOMA)}>+</Button>\n            </Col>\n          </Row>\n        </Container>\n      </Jumbotron>\n    </div>\n\n  );\n}\n\nexport default Calculadora;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculadora from './calculadora';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nReactDOM.render(<Calculadora />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}